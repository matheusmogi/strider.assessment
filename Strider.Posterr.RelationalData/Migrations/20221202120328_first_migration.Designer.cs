// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strider.Posterr.RelationalData;

#nullable disable

namespace Strider.Posterr.RelationalData.Migrations
{
    [DbContext(typeof(PosterrSqlDbContext))]
    [Migration("20221202120328_first_migration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mentions", b =>
                {
                    b.Property<Guid>("PostsMentionedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersMentionedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostsMentionedId", "UsersMentionedId");

                    b.HasIndex("UsersMentionedId");

                    b.ToTable("Mentions");
                });

            modelBuilder.Entity("Strider.Posterr.Domain.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OriginalPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OriginalPostId")
                        .IsUnique()
                        .HasFilter("[OriginalPostId] IS NOT NULL");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Strider.Posterr.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Mentions", b =>
                {
                    b.HasOne("Strider.Posterr.Domain.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsMentionedId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Strider.Posterr.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersMentionedId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Strider.Posterr.Domain.Models.Post", b =>
                {
                    b.HasOne("Strider.Posterr.Domain.Models.User", "CreatedBy")
                        .WithMany("PostsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strider.Posterr.Domain.Models.Post", null)
                        .WithOne("OriginalPost")
                        .HasForeignKey("Strider.Posterr.Domain.Models.Post", "OriginalPostId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Strider.Posterr.Domain.Models.Post", b =>
                {
                    b.Navigation("OriginalPost");
                });

            modelBuilder.Entity("Strider.Posterr.Domain.Models.User", b =>
                {
                    b.Navigation("PostsCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
